plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.runtime' version '1.12.7'
}

group 'projector'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = '17'
//noinspection GroovyUnusedAssignment
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'projector.Main'
    applicationName = 'Projector'
}

javafx {
    version = '19'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web']
}

dependencies {

    implementation project(":projector-common")
    //noinspection GradlePackageUpdate
    implementation 'com.h2database:h2:1.4.193'

    implementation 'com.j256.ormlite:ormlite-core:4.48'
    implementation 'com.j256.ormlite:ormlite-jdbc:4.48'

    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.39.3.0'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'com.squareup.okhttp3:okhttp:3.8.0'

    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0' //! Should be same in projector-updater!
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'com.1stleg:jnativehook:2.1.0'

    implementation('com.github.oshi:oshi-core:6.6.5') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testImplementation 'junit:junit:4.12'
    testImplementation "org.testfx:testfx-core:4.0.+"
    testImplementation "org.testfx:testfx-junit:4.0.+"
    testImplementation group: 'org.loadui', name: 'testFx', version: '3.1.2'
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

// Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)
/*
    targetPlatform("lin") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_linux_hotspot_15.0.2_7.tar.gz")
    }

    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_mac_hotspot_15.0.2_7.tar.gz") {
            downloadDir = "$buildDir/myMac"
            archiveName = "my-mac-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7/Contents/Home"
            overwrite = true
        }
    }

    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_windows_hotspot_15.0.2_7.zip")
    }
*/

    launcher {
        noConsole = false
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "projector_icon.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Bence']
        imageName = "Projector"
        appVersion = "3.5.16"
        jvmArgs = [
                '-Djava.net.preferIPv4Stack=true',
                '-Dprism.maxvram=4096m'
        ]

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}

task installationTaskPrev(type: Exec, dependsOn: ['jpackageImage']) {
    commandLine '../cer.bat'
}

// task installationTaskPrev3(type: Exec, dependsOn: ['installationTaskPrev']) {
task installationTaskPrev3(type: Exec, dependsOn: ['jpackageImage']) {
    commandLine 'py', 'generate_lines.py'
}

task installationTaskPrev2(type: Exec, dependsOn: ['installationTaskPrev3']) {
    commandLine '"C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe"', 'setup.iss'
}

task installationTask2(type: Exec, dependsOn: ['installationTaskPrev2']) {
    commandLine '../cerInstallation.bat'
}

task installationTask(type: Exec, dependsOn: ['installationTaskPrev2']) {
    commandLine 'c:/workspace/Projector/Projector/Projector-server/aPublic_folder/create.bat'
}